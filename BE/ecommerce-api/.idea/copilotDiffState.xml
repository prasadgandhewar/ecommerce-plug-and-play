<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; &#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &#10;         https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &#10;    &lt;groupId&gt;com.ecommerce&lt;/groupId&gt;&#10;    &lt;artifactId&gt;ecommerce-api&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;name&gt;ecommerce-api&lt;/name&gt;&#10;    &lt;description&gt;E-commerce API service built with Spring Boot&lt;/description&gt;&#10;    &#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;    &#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;version&gt;8.0.33&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- JWT --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.modelmapper&lt;/groupId&gt;&#10;            &lt;artifactId&gt;modelmapper&lt;/artifactId&gt;&#10;            &lt;version&gt;3.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Testing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;excludes&gt;&#10;                        &lt;exclude&gt;&#10;                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                        &lt;/exclude&gt;&#10;                    &lt;/excludes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; &#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 &#10;         https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &#10;    &lt;groupId&gt;com.ecommerce&lt;/groupId&gt;&#10;    &lt;artifactId&gt;ecommerce-api&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;name&gt;ecommerce-api&lt;/name&gt;&#10;    &lt;description&gt;E-commerce API service built with Spring Boot&lt;/description&gt;&#10;    &#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;    &#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;version&gt;8.0.33&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- JWT --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.modelmapper&lt;/groupId&gt;&#10;            &lt;artifactId&gt;modelmapper&lt;/artifactId&gt;&#10;            &lt;version&gt;3.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Testing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;excludes&gt;&#10;                        &lt;exclude&gt;&#10;                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                        &lt;/exclude&gt;&#10;                    &lt;/excludes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.ecommerce.api.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;public class SecurityConfig {&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .csrf().disable()&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/api/test&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            );&#10;        return http.build();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;    &#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .csrf().disable()&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .anyRequest().permitAll()&#10;            )&#10;            .httpBasic().disable()&#10;            .formLogin().disable();&#10;        return http.build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/CartController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/CartController.java" />
              <option name="originalContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.entity.CartItem;&#10;import com.ecommerce.api.entity.Product;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.CartItemRepository;&#10;import com.ecommerce.api.repository.ProductRepository;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/cart&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class CartController {&#10;&#10;    @Autowired&#10;    private CartItemRepository cartItemRepository;&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Autowired&#10;    private ProductRepository productRepository;&#10;&#10;    // Get cart items for a user&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;CartItem&gt;&gt; getCartItems(@PathVariable Long userId) {&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByUserIdOrderByCreatedAtDesc(userId);&#10;        return ResponseEntity.ok(cartItems);&#10;    }&#10;&#10;    // Add item to cart&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;CartItem&gt; addToCart(@RequestBody Map&lt;String, Object&gt; request) {&#10;        try {&#10;            Long userId = Long.valueOf(request.get(&quot;userId&quot;).toString());&#10;            Long productId = Long.valueOf(request.get(&quot;productId&quot;).toString());&#10;            Integer quantity = Integer.valueOf(request.get(&quot;quantity&quot;).toString());&#10;            &#10;            Optional&lt;User&gt; user = userRepository.findById(userId);&#10;            Optional&lt;Product&gt; product = productRepository.findById(productId);&#10;            &#10;            if (!user.isPresent() || !product.isPresent()) {&#10;                return ResponseEntity.badRequest().build();&#10;            }&#10;            &#10;            // Check if item already exists in cart&#10;            Optional&lt;CartItem&gt; existingCartItem = cartItemRepository.findByUserIdAndProductId(userId, productId);&#10;            &#10;            CartItem cartItem;&#10;            if (existingCartItem.isPresent()) {&#10;                // Update quantity if item already exists&#10;                cartItem = existingCartItem.get();&#10;                cartItem.setQuantity(cartItem.getQuantity() + quantity);&#10;            } else {&#10;                // Create new cart item&#10;                cartItem = new CartItem();&#10;                cartItem.setUser(user.get());&#10;                cartItem.setProduct(product.get());&#10;                cartItem.setQuantity(quantity);&#10;            }&#10;            &#10;            CartItem savedCartItem = cartItemRepository.save(cartItem);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(savedCartItem);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Update cart item quantity&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;CartItem&gt; updateCartItem(@PathVariable Long id, @RequestBody Map&lt;String, Object&gt; request) {&#10;        try {&#10;            Integer quantity = Integer.valueOf(request.get(&quot;quantity&quot;).toString());&#10;            &#10;            Optional&lt;CartItem&gt; optionalCartItem = cartItemRepository.findById(id);&#10;            if (optionalCartItem.isPresent()) {&#10;                CartItem cartItem = optionalCartItem.get();&#10;                cartItem.setQuantity(quantity);&#10;                CartItem updatedCartItem = cartItemRepository.save(cartItem);&#10;                return ResponseEntity.ok(updatedCartItem);&#10;            }&#10;            return ResponseEntity.notFound().build();&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Remove item from cart&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; removeFromCart(@PathVariable Long id) {&#10;        Optional&lt;CartItem&gt; optionalCartItem = cartItemRepository.findById(id);&#10;        if (optionalCartItem.isPresent()) {&#10;            cartItemRepository.delete(optionalCartItem.get());&#10;            return ResponseEntity.ok().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Clear all cart items for a user&#10;    @DeleteMapping(&quot;/user/{userId}/clear&quot;)&#10;    public ResponseEntity&lt;Void&gt; clearCart(@PathVariable Long userId) {&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByUserId(userId);&#10;        cartItemRepository.deleteAll(cartItems);&#10;        return ResponseEntity.ok().build();&#10;    }&#10;&#10;    // Get cart item count for a user&#10;    @GetMapping(&quot;/user/{userId}/count&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Integer&gt;&gt; getCartItemCount(@PathVariable Long userId) {&#10;        int count = cartItemRepository.countByUserId(userId);&#10;        return ResponseEntity.ok(Map.of(&quot;count&quot;, count));&#10;    }&#10;&#10;    // Get cart total for a user&#10;    @GetMapping(&quot;/user/{userId}/total&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getCartTotal(@PathVariable Long userId) {&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByUserId(userId);&#10;        &#10;        double total = cartItems.stream()&#10;                .mapToDouble(item -&gt; item.getProduct().getPrice().doubleValue() * item.getQuantity())&#10;                .sum();&#10;        &#10;        int itemCount = cartItems.stream()&#10;                .mapToInt(CartItem::getQuantity)&#10;                .sum();&#10;        &#10;        return ResponseEntity.ok(Map.of(&#10;            &quot;total&quot;, total,&#10;            &quot;itemCount&quot;, itemCount,&#10;            &quot;items&quot;, cartItems.size()&#10;        ));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.entity.CartItem;&#10;import com.ecommerce.api.service.CartService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/cart&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class CartController {&#10;&#10;    @Autowired&#10;    private CartService cartService;&#10;&#10;    // Get cart items for a user&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;CartItem&gt;&gt; getCartItems(@PathVariable Long userId) {&#10;        List&lt;CartItem&gt; cartItems = cartService.getCartItems(userId);&#10;        return ResponseEntity.ok(cartItems);&#10;    }&#10;&#10;    // Add item to cart&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;CartItem&gt; addToCart(@RequestBody Map&lt;String, Object&gt; request) {&#10;        Optional&lt;CartItem&gt; cartItem = cartService.addToCart(request);&#10;        return cartItem.map(item -&gt; ResponseEntity.status(HttpStatus.CREATED).body(item))&#10;                      .orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Update cart item quantity&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;CartItem&gt; updateCartItem(@PathVariable Long id, @RequestBody Map&lt;String, Object&gt; request) {&#10;        try {&#10;            Integer quantity = Integer.valueOf(request.get(&quot;quantity&quot;).toString());&#10;            Optional&lt;CartItem&gt; cartItem = cartService.updateCartItem(id, quantity);&#10;            return cartItem.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Remove item from cart&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; removeFromCart(@PathVariable Long id) {&#10;        boolean removed = cartService.removeFromCart(id);&#10;        return removed ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Clear all cart items for a user&#10;    @DeleteMapping(&quot;/user/{userId}/clear&quot;)&#10;    public ResponseEntity&lt;Void&gt; clearCart(@PathVariable Long userId) {&#10;        cartService.clearCart(userId);&#10;        return ResponseEntity.ok().build();&#10;    }&#10;&#10;    // Get cart item count for a user&#10;    @GetMapping(&quot;/user/{userId}/count&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Integer&gt;&gt; getCartItemCount(@PathVariable Long userId) {&#10;        int count = cartService.getCartItemCount(userId);&#10;        return ResponseEntity.ok(Map.of(&quot;count&quot;, count));&#10;    }&#10;&#10;    // Get cart total for a user&#10;    @GetMapping(&quot;/user/{userId}/total&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getCartTotal(@PathVariable Long userId) {&#10;        Map&lt;String, Object&gt; cartTotal = cartService.getCartTotal(userId);&#10;        return ResponseEntity.ok(cartTotal);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/OrderController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/OrderController.java" />
              <option name="originalContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.entity.Order;&#10;import com.ecommerce.api.entity.OrderItem;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.entity.Product;&#10;import com.ecommerce.api.repository.OrderRepository;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import com.ecommerce.api.repository.ProductRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/orders&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class OrderController {&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Autowired&#10;    private ProductRepository productRepository;&#10;&#10;    // Get all orders with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;Order&gt;&gt; getAllOrders(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;Order&gt; orders = orderRepository.findAll(pageable);&#10;        &#10;        return ResponseEntity.ok(orders);&#10;    }&#10;&#10;    // Get order by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Order&gt; getOrderById(@PathVariable Long id) {&#10;        Optional&lt;Order&gt; order = orderRepository.findById(id);&#10;        return order.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Create new order&#10;    @PostMapping&#10;    public ResponseEntity&lt;Order&gt; createOrder(@RequestBody Map&lt;String, Object&gt; orderRequest) {&#10;        try {&#10;            Long userId = Long.valueOf(orderRequest.get(&quot;userId&quot;).toString());&#10;            String shippingAddress = (String) orderRequest.get(&quot;shippingAddress&quot;);&#10;            String billingAddress = (String) orderRequest.get(&quot;billingAddress&quot;);&#10;            String paymentMethod = (String) orderRequest.get(&quot;paymentMethod&quot;);&#10;            String notes = (String) orderRequest.get(&quot;notes&quot;);&#10;            &#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Map&lt;String, Object&gt;&gt; items = (List&lt;Map&lt;String, Object&gt;&gt;) orderRequest.get(&quot;items&quot;);&#10;            &#10;            Optional&lt;User&gt; user = userRepository.findById(userId);&#10;            if (!user.isPresent()) {&#10;                return ResponseEntity.badRequest().build();&#10;            }&#10;            &#10;            Order order = new Order();&#10;            order.setUser(user.get());&#10;            order.setStatus(Order.OrderStatus.PENDING);&#10;            order.setShippingAddress(shippingAddress);&#10;            order.setBillingAddress(billingAddress);&#10;            order.setPaymentMethod(paymentMethod);&#10;            order.setNotes(notes);&#10;            &#10;            BigDecimal totalAmount = BigDecimal.ZERO;&#10;            &#10;            // Save order first to get ID&#10;            Order savedOrder = orderRepository.save(order);&#10;            &#10;            // Add order items&#10;            for (Map&lt;String, Object&gt; itemData : items) {&#10;                Long productId = Long.valueOf(itemData.get(&quot;productId&quot;).toString());&#10;                Integer quantity = Integer.valueOf(itemData.get(&quot;quantity&quot;).toString());&#10;                &#10;                Optional&lt;Product&gt; product = productRepository.findById(productId);&#10;                if (product.isPresent()) {&#10;                    OrderItem orderItem = new OrderItem();&#10;                    orderItem.setOrder(savedOrder);&#10;                    orderItem.setProduct(product.get());&#10;                    orderItem.setQuantity(quantity);&#10;                    orderItem.setUnitPrice(product.get().getPrice());&#10;                    &#10;                    BigDecimal subtotal = product.get().getPrice().multiply(BigDecimal.valueOf(quantity));&#10;                    orderItem.setSubtotal(subtotal);&#10;                    totalAmount = totalAmount.add(subtotal);&#10;                    &#10;                    savedOrder.getOrderItems().add(orderItem);&#10;                }&#10;            }&#10;            &#10;            savedOrder.setTotalAmount(totalAmount);&#10;            Order finalOrder = orderRepository.save(savedOrder);&#10;            &#10;            return ResponseEntity.status(HttpStatus.CREATED).body(finalOrder);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Update order status&#10;    @PutMapping(&quot;/{id}/status&quot;)&#10;    public ResponseEntity&lt;Order&gt; updateOrderStatus(@PathVariable Long id, @RequestBody Map&lt;String, String&gt; request) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            String status = request.get(&quot;status&quot;);&#10;            try {&#10;                Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;                order.setStatus(orderStatus);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return ResponseEntity.ok(updatedOrder);&#10;            } catch (IllegalArgumentException e) {&#10;                return ResponseEntity.badRequest().build();&#10;            }&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get orders by user ID&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;Order&gt;&gt; getOrdersByUserId(@PathVariable Long userId) {&#10;        List&lt;Order&gt; orders = orderRepository.findByUserIdOrderByCreatedAtDesc(userId);&#10;        return ResponseEntity.ok(orders);&#10;    }&#10;&#10;    // Get orders by status&#10;    @GetMapping(&quot;/status/{status}&quot;)&#10;    public ResponseEntity&lt;List&lt;Order&gt;&gt; getOrdersByStatus(@PathVariable String status) {&#10;        try {&#10;            Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;            List&lt;Order&gt; orders = orderRepository.findByStatusOrderByCreatedAtDesc(orderStatus);&#10;            return ResponseEntity.ok(orders);&#10;        } catch (IllegalArgumentException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Cancel order&#10;    @PutMapping(&quot;/{id}/cancel&quot;)&#10;    public ResponseEntity&lt;Order&gt; cancelOrder(@PathVariable Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            if (order.getStatus() == Order.OrderStatus.PENDING || order.getStatus() == Order.OrderStatus.CONFIRMED) {&#10;                order.setStatus(Order.OrderStatus.CANCELLED);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return ResponseEntity.ok(updatedOrder);&#10;            }&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Delete order&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteOrder(@PathVariable Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            orderRepository.delete(optionalOrder.get());&#10;            return ResponseEntity.ok().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.entity.Order;&#10;import com.ecommerce.api.service.OrderService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/orders&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class OrderController {&#10;&#10;    @Autowired&#10;    private OrderService orderService;&#10;&#10;    // Get all orders with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;Order&gt;&gt; getAllOrders(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;Order&gt; orders = orderService.getAllOrders(pageable);&#10;        &#10;        return ResponseEntity.ok(orders);&#10;    }&#10;&#10;    // Get order by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Order&gt; getOrderById(@PathVariable Long id) {&#10;        Optional&lt;Order&gt; order = orderService.getOrderById(id);&#10;        return order.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Create new order&#10;    @PostMapping&#10;    public ResponseEntity&lt;Order&gt; createOrder(@RequestBody Map&lt;String, Object&gt; orderRequest) {&#10;        Optional&lt;Order&gt; order = orderService.createOrder(orderRequest);&#10;        return order.map(o -&gt; ResponseEntity.status(HttpStatus.CREATED).body(o))&#10;                   .orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Update order status&#10;    @PutMapping(&quot;/{id}/status&quot;)&#10;    public ResponseEntity&lt;Order&gt; updateOrderStatus(@PathVariable Long id, @RequestBody Map&lt;String, String&gt; request) {&#10;        String status = request.get(&quot;status&quot;);&#10;        Optional&lt;Order&gt; order = orderService.updateOrderStatus(id, status);&#10;        return order.map(ResponseEntity::ok).orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Get orders by user ID&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;Order&gt;&gt; getOrdersByUserId(@PathVariable Long userId) {&#10;        List&lt;Order&gt; orders = orderService.getOrdersByUserId(userId);&#10;        return ResponseEntity.ok(orders);&#10;    }&#10;&#10;    // Get orders by status&#10;    @GetMapping(&quot;/status/{status}&quot;)&#10;    public ResponseEntity&lt;List&lt;Order&gt;&gt; getOrdersByStatus(@PathVariable String status) {&#10;        Optional&lt;List&lt;Order&gt;&gt; orders = orderService.getOrdersByStatus(status);&#10;        return orders.map(ResponseEntity::ok).orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Cancel order&#10;    @PutMapping(&quot;/{id}/cancel&quot;)&#10;    public ResponseEntity&lt;Order&gt; cancelOrder(@PathVariable Long id) {&#10;        Optional&lt;Order&gt; order = orderService.cancelOrder(id);&#10;        return order.map(ResponseEntity::ok).orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Delete order&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteOrder(@PathVariable Long id) {&#10;        boolean deleted = orderService.deleteOrder(id);&#10;        return deleted ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/ProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/ProductController.java" />
              <option name="originalContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.dto.ProductRequest;&#10;import com.ecommerce.api.dto.ProductResponse;&#10;import com.ecommerce.api.entity.Product;&#10;import com.ecommerce.api.repository.ProductRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/products&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class ProductController {&#10;&#10;    @Autowired&#10;    private ProductRepository productRepository;&#10;&#10;    // Get all products with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;ProductResponse&gt;&gt; getAllProducts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;id&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;asc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;Product&gt; products = productRepository.findByIsActiveTrue(pageable);&#10;        &#10;        Page&lt;ProductResponse&gt; response = products.map(this::convertToResponse);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Get product by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; getProductById(@PathVariable Long id) {&#10;        Optional&lt;Product&gt; product = productRepository.findById(id);&#10;        if (product.isPresent() &amp;&amp; product.get().getIsActive()) {&#10;            return ResponseEntity.ok(convertToResponse(product.get()));&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Create new product&#10;    @PostMapping&#10;    public ResponseEntity&lt;ProductResponse&gt; createProduct(@Valid @RequestBody ProductRequest request) {&#10;        Product product = new Product();&#10;        product.setName(request.getName());&#10;        product.setDescription(request.getDescription());&#10;        product.setPrice(request.getPrice());&#10;        product.setStockQuantity(request.getStockQuantity());&#10;        product.setCategory(request.getCategory());&#10;        product.setImageUrl(request.getImageUrl());&#10;        product.setIsActive(true);&#10;        &#10;        Product savedProduct = productRepository.save(product);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(convertToResponse(savedProduct));&#10;    }&#10;&#10;    // Update product&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; updateProduct(@PathVariable Long id, @Valid @RequestBody ProductRequest request) {&#10;        Optional&lt;Product&gt; optionalProduct = productRepository.findById(id);&#10;        if (optionalProduct.isPresent()) {&#10;            Product product = optionalProduct.get();&#10;            product.setName(request.getName());&#10;            product.setDescription(request.getDescription());&#10;            product.setPrice(request.getPrice());&#10;            product.setStockQuantity(request.getStockQuantity());&#10;            product.setCategory(request.getCategory());&#10;            product.setImageUrl(request.getImageUrl());&#10;            &#10;            Product updatedProduct = productRepository.save(product);&#10;            return ResponseEntity.ok(convertToResponse(updatedProduct));&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Delete product (soft delete)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {&#10;        Optional&lt;Product&gt; optionalProduct = productRepository.findById(id);&#10;        if (optionalProduct.isPresent()) {&#10;            Product product = optionalProduct.get();&#10;            product.setIsActive(false);&#10;            productRepository.save(product);&#10;            return ResponseEntity.ok().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get products by category&#10;    @GetMapping(&quot;/category/{category}&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; getProductsByCategory(@PathVariable String category) {&#10;        List&lt;Product&gt; products = productRepository.findByCategoryAndIsActiveTrue(category);&#10;        List&lt;ProductResponse&gt; response = products.stream()&#10;                .map(this::convertToResponse)&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Search products by name&#10;    @GetMapping(&quot;/search&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; searchProducts(@RequestParam String name) {&#10;        List&lt;Product&gt; products = productRepository.findByNameContainingIgnoreCaseAndIsActiveTrue(name);&#10;        List&lt;ProductResponse&gt; response = products.stream()&#10;                .map(this::convertToResponse)&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Get products by price range&#10;    @GetMapping(&quot;/price-range&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; getProductsByPriceRange(&#10;            @RequestParam BigDecimal minPrice,&#10;            @RequestParam BigDecimal maxPrice) {&#10;        List&lt;Product&gt; products = productRepository.findByPriceBetweenAndIsActiveTrue(minPrice, maxPrice);&#10;        List&lt;ProductResponse&gt; response = products.stream()&#10;                .map(this::convertToResponse)&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Helper method to convert Entity to Response DTO&#10;    private ProductResponse convertToResponse(Product product) {&#10;        ProductResponse response = new ProductResponse();&#10;        response.setId(product.getId());&#10;        response.setName(product.getName());&#10;        response.setDescription(product.getDescription());&#10;        response.setPrice(product.getPrice());&#10;        response.setStockQuantity(product.getStockQuantity());&#10;        response.setCategory(product.getCategory());&#10;        response.setImageUrl(product.getImageUrl());&#10;        response.setIsActive(product.getIsActive());&#10;        response.setCreatedAt(product.getCreatedAt());&#10;        response.setUpdatedAt(product.getUpdatedAt());&#10;        return response;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.dto.ProductRequest;&#10;import com.ecommerce.api.dto.ProductResponse;&#10;import com.ecommerce.api.service.ProductService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/products&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class ProductController {&#10;&#10;    @Autowired&#10;    private ProductService productService;&#10;&#10;    // Get all products with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;ProductResponse&gt;&gt; getAllProducts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;id&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;asc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;ProductResponse&gt; products = productService.getAllProducts(pageable);&#10;        &#10;        return ResponseEntity.ok(products);&#10;    }&#10;&#10;    // Get product by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; getProductById(@PathVariable Long id) {&#10;        Optional&lt;ProductResponse&gt; product = productService.getProductById(id);&#10;        return product.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Create new product&#10;    @PostMapping&#10;    public ResponseEntity&lt;ProductResponse&gt; createProduct(@Valid @RequestBody ProductRequest request) {&#10;        ProductResponse product = productService.createProduct(request);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(product);&#10;    }&#10;&#10;    // Update product&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; updateProduct(@PathVariable Long id, @Valid @RequestBody ProductRequest request) {&#10;        Optional&lt;ProductResponse&gt; product = productService.updateProduct(id, request);&#10;        return product.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Delete product (soft delete)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {&#10;        boolean deleted = productService.deleteProduct(id);&#10;        return deleted ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get products by category&#10;    @GetMapping(&quot;/category/{category}&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; getProductsByCategory(@PathVariable String category) {&#10;        List&lt;ProductResponse&gt; products = productService.getProductsByCategory(category);&#10;        return ResponseEntity.ok(products);&#10;    }&#10;&#10;    // Search products by name&#10;    @GetMapping(&quot;/search&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; searchProducts(@RequestParam String name) {&#10;        List&lt;ProductResponse&gt; products = productService.searchProducts(name);&#10;        return ResponseEntity.ok(products);&#10;    }&#10;&#10;    // Get products by price range&#10;    @GetMapping(&quot;/price-range&quot;)&#10;    public ResponseEntity&lt;List&lt;ProductResponse&gt;&gt; getProductsByPriceRange(&#10;            @RequestParam BigDecimal minPrice,&#10;            @RequestParam BigDecimal maxPrice) {&#10;        List&lt;ProductResponse&gt; products = productService.getProductsByPriceRange(minPrice, maxPrice);&#10;        return ResponseEntity.ok(products);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/TestController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/TestController.java" />
              <option name="originalContent" value="package com.ecommerce.api.controller;&#10;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class TestController {&#10;&#10;    @GetMapping(&quot;/test&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; test() {&#10;        Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;        response.put(&quot;message&quot;, &quot;Ecommerce API is running successfully!&quot;);&#10;        response.put(&quot;timestamp&quot;, LocalDateTime.now());&#10;        response.put(&quot;status&quot;, &quot;OK&quot;);&#10;        response.put(&quot;version&quot;, &quot;1.0.0&quot;);&#10;&#10;        return ResponseEntity.ok(response);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.controller;&#10;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.CrossOrigin;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/test&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class TestController {&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; test() {&#10;        Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;        response.put(&quot;message&quot;, &quot;Ecommerce API is running successfully!&quot;);&#10;        response.put(&quot;timestamp&quot;, LocalDateTime.now());&#10;        response.put(&quot;status&quot;, &quot;OK&quot;);&#10;        response.put(&quot;version&quot;, &quot;1.0.0&quot;);&#10;&#10;        return ResponseEntity.ok(response);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/controller/UserController.java" />
              <option name="originalContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.dto.RegisterRequest;&#10;import com.ecommerce.api.dto.UserResponse;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/users&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class UserController {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    // Get all users with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;UserResponse&gt;&gt; getAllUsers(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;id&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;asc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;User&gt; users = userRepository.findByIsActiveTrue(pageable);&#10;        &#10;        Page&lt;UserResponse&gt; response = users.map(this::convertToResponse);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Get user by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserById(@PathVariable Long id) {&#10;        Optional&lt;User&gt; user = userRepository.findById(id);&#10;        if (user.isPresent() &amp;&amp; user.get().getIsActive()) {&#10;            return ResponseEntity.ok(convertToResponse(user.get()));&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Create new user (registration)&#10;    @PostMapping&#10;    public ResponseEntity&lt;UserResponse&gt; createUser(@Valid @RequestBody RegisterRequest request) {&#10;        // Check if email already exists&#10;        if (userRepository.findByEmail(request.getEmail()).isPresent()) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;        &#10;        User user = new User();&#10;        user.setFirstName(request.getFirstName());&#10;        user.setLastName(request.getLastName());&#10;        user.setEmail(request.getEmail());&#10;        user.setPassword(request.getPassword()); // In real app, encrypt this&#10;        user.setPhone(request.getPhone());&#10;        user.setRole(User.Role.USER);&#10;        user.setIsActive(true);&#10;        &#10;        User savedUser = userRepository.save(user);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(convertToResponse(savedUser));&#10;    }&#10;&#10;    // Update user&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; updateUser(@PathVariable Long id, @Valid @RequestBody RegisterRequest request) {&#10;        Optional&lt;User&gt; optionalUser = userRepository.findById(id);&#10;        if (optionalUser.isPresent()) {&#10;            User user = optionalUser.get();&#10;            user.setFirstName(request.getFirstName());&#10;            user.setLastName(request.getLastName());&#10;            user.setPhone(request.getPhone());&#10;            // Don't update email and password here for security&#10;            &#10;            User updatedUser = userRepository.save(user);&#10;            return ResponseEntity.ok(convertToResponse(updatedUser));&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Delete user (soft delete)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable Long id) {&#10;        Optional&lt;User&gt; optionalUser = userRepository.findById(id);&#10;        if (optionalUser.isPresent()) {&#10;            User user = optionalUser.get();&#10;            user.setIsActive(false);&#10;            userRepository.save(user);&#10;            return ResponseEntity.ok().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get user by email&#10;    @GetMapping(&quot;/email/{email}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserByEmail(@PathVariable String email) {&#10;        Optional&lt;User&gt; user = userRepository.findByEmail(email);&#10;        if (user.isPresent() &amp;&amp; user.get().getIsActive()) {&#10;            return ResponseEntity.ok(convertToResponse(user.get()));&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get users by role&#10;    @GetMapping(&quot;/role/{role}&quot;)&#10;    public ResponseEntity&lt;List&lt;UserResponse&gt;&gt; getUsersByRole(@PathVariable String role) {&#10;        User.Role userRole = User.Role.valueOf(role.toUpperCase());&#10;        List&lt;User&gt; users = userRepository.findByRoleAndIsActiveTrue(userRole);&#10;        List&lt;UserResponse&gt; response = users.stream()&#10;                .map(this::convertToResponse)&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // Helper method to convert Entity to Response DTO&#10;    private UserResponse convertToResponse(User user) {&#10;        UserResponse response = new UserResponse();&#10;        response.setId(user.getId());&#10;        response.setFirstName(user.getFirstName());&#10;        response.setLastName(user.getLastName());&#10;        response.setEmail(user.getEmail());&#10;        response.setPhone(user.getPhone());&#10;        response.setRole(user.getRole().name());&#10;        response.setIsActive(user.getIsActive());&#10;        response.setCreatedAt(user.getCreatedAt());&#10;        response.setUpdatedAt(user.getUpdatedAt());&#10;        return response;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.controller;&#10;&#10;import com.ecommerce.api.dto.RegisterRequest;&#10;import com.ecommerce.api.dto.UserResponse;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/users&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class UserController {&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    // Get all users with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;Page&lt;UserResponse&gt;&gt; getAllUsers(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;id&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;asc&quot;) String sortDir) {&#10;        &#10;        Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ? &#10;            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;        &#10;        Pageable pageable = PageRequest.of(page, size, sort);&#10;        Page&lt;UserResponse&gt; users = userService.getAllUsers(pageable);&#10;        &#10;        return ResponseEntity.ok(users);&#10;    }&#10;&#10;    // Get user by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserById(@PathVariable Long id) {&#10;        Optional&lt;UserResponse&gt; user = userService.getUserById(id);&#10;        return user.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Create new user (registration)&#10;    @PostMapping&#10;    public ResponseEntity&lt;UserResponse&gt; createUser(@Valid @RequestBody RegisterRequest request) {&#10;        Optional&lt;UserResponse&gt; user = userService.createUser(request);&#10;        return user.map(u -&gt; ResponseEntity.status(HttpStatus.CREATED).body(u))&#10;                   .orElse(ResponseEntity.badRequest().build());&#10;    }&#10;&#10;    // Update user&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; updateUser(@PathVariable Long id, @Valid @RequestBody RegisterRequest request) {&#10;        Optional&lt;UserResponse&gt; user = userService.updateUser(id, request);&#10;        return user.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Delete user (soft delete)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable Long id) {&#10;        boolean deleted = userService.deleteUser(id);&#10;        return deleted ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Get user by email&#10;    @GetMapping(&quot;/email/{email}&quot;)&#10;    public ResponseEntity&lt;UserResponse&gt; getUserByEmail(@PathVariable String email) {&#10;        Optional&lt;UserResponse&gt; user = userService.getUserByEmail(email);&#10;        return user.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());&#10;    }&#10;&#10;    // Get users by role&#10;    @GetMapping(&quot;/role/{role}&quot;)&#10;    public ResponseEntity&lt;List&lt;UserResponse&gt;&gt; getUsersByRole(@PathVariable String role) {&#10;        User.Role userRole = User.Role.valueOf(role.toUpperCase());&#10;        List&lt;UserResponse&gt; users = userService.getUsersByRole(userRole);&#10;        return ResponseEntity.ok(users);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/LoginRequest.java" />
              <option name="originalContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import javax.validation.constraints.Email;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.Size;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class LoginRequest {&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class LoginRequest {&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/ProductRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/ProductRequest.java" />
              <option name="originalContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import javax.validation.constraints.DecimalMin;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.NotNull;&#10;import javax.validation.constraints.Size;&#10;import java.math.BigDecimal;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ProductRequest {&#10;&#10;    @NotBlank(message = &quot;Product name is required&quot;)&#10;    @Size(max = 100)&#10;    private String name;&#10;&#10;    @Size(max = 500)&#10;    private String description;&#10;&#10;    @NotNull(message = &quot;Price is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Price must be greater than 0&quot;)&#10;    private BigDecimal price;&#10;&#10;    @NotNull(message = &quot;Stock quantity is required&quot;)&#10;    private Integer stockQuantity;&#10;&#10;    @Size(max = 50)&#10;    private String category;&#10;&#10;    private String imageUrl;&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.dto;&#13;&#10;&#13;&#10;import lombok.AllArgsConstructor;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.NoArgsConstructor;&#13;&#10;&#13;&#10;import jakarta.validation.constraints.DecimalMin;&#13;&#10;import jakarta.validation.constraints.NotBlank;&#13;&#10;import jakarta.validation.constraints.NotNull;&#13;&#10;import jakarta.validation.constraints.Size;&#13;&#10;import java.math.BigDecimal;&#13;&#10;&#13;&#10;@Data&#13;&#10;@NoArgsConstructor&#13;&#10;@AllArgsConstructor&#13;&#10;public class ProductRequest {&#13;&#10;&#13;&#10;    @NotBlank(message = &quot;Product name is required&quot;)&#13;&#10;    @Size(max = 100)&#13;&#10;    private String name;&#13;&#10;&#13;&#10;    @Size(max = 500)&#13;&#10;    private String description;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Price is required&quot;)&#13;&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Price must be greater than 0&quot;)&#13;&#10;    private BigDecimal price;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Stock quantity is required&quot;)&#13;&#10;    private Integer stockQuantity;&#13;&#10;&#13;&#10;    @Size(max = 50)&#13;&#10;    private String category;&#13;&#10;&#13;&#10;    private String imageUrl;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/RegisterRequest.java" />
              <option name="originalContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import javax.validation.constraints.Email;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.Size;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class RegisterRequest {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(max = 50)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(max = 50)&#10;    private String lastName;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    @Size(max = 15)&#10;    private String phone;&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class RegisterRequest {&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(max = 50)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(max = 50)&#10;    private String lastName;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;&#10;    @Size(max = 15)&#10;    private String phone;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/UserResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/dto/UserResponse.java" />
              <option name="updatedContent" value="package com.ecommerce.api.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UserResponse {&#10;&#10;    private Long id;&#10;    private String firstName;&#10;    private String lastName;&#10;    private String email;&#10;    private String phone;&#10;    private String role;&#10;    private Boolean isActive;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/CartItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/CartItem.java" />
              <option name="originalContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;&#10;import javax.persistence.*;&#10;import javax.validation.constraints.Min;&#10;import javax.validation.constraints.NotNull;&#10;&#10;@Entity&#10;@Table(name = &quot;cart_items&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CartItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotNull(message = &quot;User is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @NotNull(message = &quot;Product is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    private Product product;&#10;&#10;    @NotNull(message = &quot;Quantity is required&quot;)&#10;    @Min(value = 1, message = &quot;Quantity must be at least 1&quot;)&#10;    @Column(name = &quot;quantity&quot;, nullable = false)&#10;    private Integer quantity;&#10;&#10;    @CreationTimestamp&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#10;    private java.time.LocalDateTime createdAt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.entity;&#13;&#10;&#13;&#10;import lombok.AllArgsConstructor;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.NoArgsConstructor;&#13;&#10;import org.hibernate.annotations.CreationTimestamp;&#13;&#10;&#13;&#10;import jakarta.persistence.*;&#13;&#10;import jakarta.validation.constraints.Min;&#13;&#10;import jakarta.validation.constraints.NotNull;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@Table(name = &quot;cart_items&quot;)&#13;&#10;@Data&#13;&#10;@NoArgsConstructor&#13;&#10;@AllArgsConstructor&#13;&#10;public class CartItem {&#13;&#10;&#13;&#10;    @Id&#13;&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    private Long id;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;User is required&quot;)&#13;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#13;&#10;    @JoinColumn(name = &quot;user_id&quot;, nullable = false)&#13;&#10;    private User user;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Product is required&quot;)&#13;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#13;&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#13;&#10;    private Product product;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Quantity is required&quot;)&#13;&#10;    @Min(value = 1, message = &quot;Quantity must be at least 1&quot;)&#13;&#10;    @Column(name = &quot;quantity&quot;, nullable = false)&#13;&#10;    private Integer quantity;&#13;&#10;&#13;&#10;    @CreationTimestamp&#13;&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#13;&#10;    private java.time.LocalDateTime createdAt;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/OrderItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/OrderItem.java" />
              <option name="originalContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import javax.persistence.*;&#10;import javax.validation.constraints.DecimalMin;&#10;import javax.validation.constraints.Min;&#10;import javax.validation.constraints.NotNull;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;order_items&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class OrderItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotNull(message = &quot;Order is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;order_id&quot;, nullable = false)&#10;    private Order order;&#10;&#10;    @NotNull(message = &quot;Product is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    private Product product;&#10;&#10;    @NotNull(message = &quot;Quantity is required&quot;)&#10;    @Min(value = 1, message = &quot;Quantity must be at least 1&quot;)&#10;    @Column(name = &quot;quantity&quot;, nullable = false)&#10;    private Integer quantity;&#10;&#10;    @NotNull(message = &quot;Unit price is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Unit price must be greater than 0&quot;)&#10;    @Column(name = &quot;unit_price&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal unitPrice;&#10;&#10;    @NotNull(message = &quot;Subtotal is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Subtotal must be greater than 0&quot;)&#10;    @Column(name = &quot;subtotal&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal subtotal;&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.DecimalMin;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;order_items&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class OrderItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotNull(message = &quot;Order is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;order_id&quot;, nullable = false)&#10;    private Order order;&#10;&#10;    @NotNull(message = &quot;Product is required&quot;)&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    private Product product;&#10;&#10;    @NotNull(message = &quot;Quantity is required&quot;)&#10;    @Min(value = 1, message = &quot;Quantity must be at least 1&quot;)&#10;    @Column(name = &quot;quantity&quot;, nullable = false)&#10;    private Integer quantity;&#10;&#10;    @NotNull(message = &quot;Unit price is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Unit price must be greater than 0&quot;)&#10;    @Column(name = &quot;unit_price&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal unitPrice;&#10;&#10;    @NotNull(message = &quot;Subtotal is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Subtotal must be greater than 0&quot;)&#10;    @Column(name = &quot;subtotal&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal subtotal;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/Product.java" />
              <option name="originalContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;&#10;import javax.persistence.*;&#10;import javax.validation.constraints.DecimalMin;&#10;import javax.validation.constraints.NotBlank;&#10;import javax.validation.constraints.NotNull;&#10;import javax.validation.constraints.Size;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;products&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class Product {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Product name is required&quot;)&#10;    @Size(max = 100)&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Size(max = 500)&#10;    @Column(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @NotNull(message = &quot;Price is required&quot;)&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Price must be greater than 0&quot;)&#10;    @Column(name = &quot;price&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal price;&#10;&#10;    @NotNull(message = &quot;Stock quantity is required&quot;)&#10;    @Column(name = &quot;stock_quantity&quot;, nullable = false)&#10;    private Integer stockQuantity = 0;&#10;&#10;    @Size(max = 50)&#10;    @Column(name = &quot;category&quot;)&#10;    private String category;&#10;&#10;    @Column(name = &quot;image_url&quot;)&#10;    private String imageUrl;&#10;&#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;&#10;    @CreationTimestamp&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @UpdateTimestamp&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @OneToMany(mappedBy = &quot;product&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;product&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.entity;&#13;&#10;&#13;&#10;import lombok.AllArgsConstructor;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.NoArgsConstructor;&#13;&#10;import org.hibernate.annotations.CreationTimestamp;&#13;&#10;import org.hibernate.annotations.UpdateTimestamp;&#13;&#10;&#13;&#10;import jakarta.persistence.*;&#13;&#10;import jakarta.validation.constraints.DecimalMin;&#13;&#10;import jakarta.validation.constraints.NotBlank;&#13;&#10;import jakarta.validation.constraints.NotNull;&#13;&#10;import jakarta.validation.constraints.Size;&#13;&#10;import java.math.BigDecimal;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@Table(name = &quot;products&quot;)&#13;&#10;@Data&#13;&#10;@NoArgsConstructor&#13;&#10;@AllArgsConstructor&#13;&#10;public class Product {&#13;&#10;&#13;&#10;    @Id&#13;&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#13;&#10;    private Long id;&#13;&#10;&#13;&#10;    @NotBlank(message = &quot;Product name is required&quot;)&#13;&#10;    @Size(max = 100)&#13;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#13;&#10;    private String name;&#13;&#10;&#13;&#10;    @Size(max = 500)&#13;&#10;    @Column(name = &quot;description&quot;)&#13;&#10;    private String description;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Price is required&quot;)&#13;&#10;    @DecimalMin(value = &quot;0.0&quot;, inclusive = false, message = &quot;Price must be greater than 0&quot;)&#13;&#10;    @Column(name = &quot;price&quot;, nullable = false, precision = 10, scale = 2)&#13;&#10;    private BigDecimal price;&#13;&#10;&#13;&#10;    @NotNull(message = &quot;Stock quantity is required&quot;)&#13;&#10;    @Column(name = &quot;stock_quantity&quot;, nullable = false)&#13;&#10;    private Integer stockQuantity = 0;&#13;&#10;&#13;&#10;    @Size(max = 50)&#13;&#10;    @Column(name = &quot;category&quot;)&#13;&#10;    private String category;&#13;&#10;&#13;&#10;    @Column(name = &quot;image_url&quot;)&#13;&#10;    private String imageUrl;&#13;&#10;&#13;&#10;    @Column(name = &quot;is_active&quot;)&#13;&#10;    private Boolean isActive = true;&#13;&#10;&#13;&#10;    @CreationTimestamp&#13;&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#13;&#10;    private LocalDateTime createdAt;&#13;&#10;&#13;&#10;    @UpdateTimestamp&#13;&#10;    @Column(name = &quot;updated_at&quot;)&#13;&#10;    private LocalDateTime updatedAt;&#13;&#10;&#13;&#10;    @OneToMany(mappedBy = &quot;product&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#13;&#10;    private List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;    @OneToMany(mappedBy = &quot;product&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#13;&#10;    private List&lt;OrderItem&gt; orderItems = new ArrayList&lt;&gt;();&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/entity/User.java" />
              <option name="originalContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;import org.springframework.security.core.GrantedAuthority;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.Collection;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class User implements UserDetails {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(max = 50)&#10;    @Column(name = &quot;first_name&quot;, nullable = false)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(max = 50)&#10;    @Column(name = &quot;last_name&quot;, nullable = false)&#10;    private String lastName;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100)&#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    @Column(name = &quot;password&quot;, nullable = false)&#10;    private String password;&#10;&#10;    @Size(max = 15)&#10;    @Column(name = &quot;phone&quot;)&#10;    private String phone;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private Role role = Role.USER;&#10;&#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;&#10;    @CreationTimestamp&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @UpdateTimestamp&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;&#10;    public enum Role {&#10;        USER, ADMIN&#10;    }&#10;&#10;    @Override&#10;    public String getUsername() {&#10;        return this.email;&#10;    }&#10;&#10;    @Override&#10;    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {&#10;        List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();&#10;        authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + this.role.name()));&#10;        return authorities;&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isEnabled() {&#10;        return this.isActive;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    @Size(max = 50)&#10;    @Column(name = &quot;first_name&quot;, nullable = false)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    @Size(max = 50)&#10;    @Column(name = &quot;last_name&quot;, nullable = false)&#10;    private String lastName;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Size(max = 100)&#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    @Column(name = &quot;password&quot;, nullable = false)&#10;    private String password;&#10;&#10;    @Size(max = 15)&#10;    @Column(name = &quot;phone&quot;)&#10;    private String phone;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private Role role = Role.USER;&#10;&#10;    @Column(name = &quot;is_active&quot;)&#10;    private Boolean isActive = true;&#10;&#10;    @CreationTimestamp&#10;    @Column(name = &quot;created_at&quot;, updatable = false)&#10;    private LocalDateTime createdAt;&#10;&#10;    @UpdateTimestamp&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems = new ArrayList&lt;&gt;();&#10;&#10;    public enum Role {&#10;        USER, ADMIN&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/CartItemRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/CartItemRepository.java" />
              <option name="originalContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.CartItem;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Modifying;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface CartItemRepository extends JpaRepository&lt;CartItem, Long&gt; {&#10;&#10;    List&lt;CartItem&gt; findByUserId(Long userId);&#10;&#10;    Optional&lt;CartItem&gt; findByUserIdAndProductId(Long userId, Long productId);&#10;&#10;    @Modifying&#10;    @Query(&quot;DELETE FROM CartItem c WHERE c.user.id = :userId&quot;)&#10;    void deleteByUserId(@Param(&quot;userId&quot;) Long userId);&#10;&#10;    @Modifying&#10;    @Query(&quot;DELETE FROM CartItem c WHERE c.user.id = :userId AND c.product.id = :productId&quot;)&#10;    void deleteByUserIdAndProductId(@Param(&quot;userId&quot;) Long userId, @Param(&quot;productId&quot;) Long productId);&#10;&#10;    @Query(&quot;SELECT SUM(c.quantity) FROM CartItem c WHERE c.user.id = :userId&quot;)&#10;    Integer getTotalItemsInCart(@Param(&quot;userId&quot;) Long userId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.repository;&#13;&#10;&#13;&#10;import com.ecommerce.api.entity.CartItem;&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Optional;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface CartItemRepository extends JpaRepository&lt;CartItem, Long&gt; {&#13;&#10;&#13;&#10;    List&lt;CartItem&gt; findByUserIdOrderByCreatedAtDesc(Long userId);&#13;&#10;&#13;&#10;    List&lt;CartItem&gt; findByUserId(Long userId);&#13;&#10;&#13;&#10;    Optional&lt;CartItem&gt; findByUserIdAndProductId(Long userId, Long productId);&#13;&#10;&#13;&#10;    int countByUserId(Long userId);&#13;&#10;&#13;&#10;    void deleteByUserId(Long userId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/OrderItemRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/OrderItemRepository.java" />
              <option name="originalContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.OrderItem;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface OrderItemRepository extends JpaRepository&lt;OrderItem, Long&gt; {&#10;&#10;    List&lt;OrderItem&gt; findByOrderId(Long orderId);&#10;&#10;    @Query(&quot;SELECT oi FROM OrderItem oi WHERE oi.product.id = :productId&quot;)&#10;    List&lt;OrderItem&gt; findByProductId(@Param(&quot;productId&quot;) Long productId);&#10;&#10;    @Query(&quot;SELECT SUM(oi.quantity) FROM OrderItem oi WHERE oi.product.id = :productId&quot;)&#10;    Integer getTotalQuantitySoldForProduct(@Param(&quot;productId&quot;) Long productId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.repository;&#13;&#10;&#13;&#10;import com.ecommerce.api.entity.OrderItem;&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#13;&#10;import org.springframework.data.jpa.repository.Query;&#13;&#10;import org.springframework.data.repository.query.Param;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface OrderItemRepository extends JpaRepository&lt;OrderItem, Long&gt; {&#13;&#10;&#13;&#10;    List&lt;OrderItem&gt; findByOrderId(Long orderId);&#13;&#10;&#13;&#10;    List&lt;OrderItem&gt; findByProductId(Long productId);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT oi FROM OrderItem oi WHERE oi.order.user.id = :userId&quot;)&#13;&#10;    List&lt;OrderItem&gt; findByUserId(@Param(&quot;userId&quot;) Long userId);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT SUM(oi.quantity) FROM OrderItem oi WHERE oi.product.id = :productId&quot;)&#13;&#10;    Long getTotalQuantitySoldForProduct(@Param(&quot;productId&quot;) Long productId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/OrderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/OrderRepository.java" />
              <option name="originalContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.Order;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface OrderRepository extends JpaRepository&lt;Order, Long&gt; {&#10;&#10;    List&lt;Order&gt; findByUserIdOrderByCreatedAtDesc(Long userId);&#10;&#10;    Page&lt;Order&gt; findByUserIdOrderByCreatedAtDesc(Long userId, Pageable pageable);&#10;&#10;    List&lt;Order&gt; findByStatus(Order.OrderStatus status);&#10;&#10;    @Query(&quot;SELECT o FROM Order o WHERE o.createdAt BETWEEN :startDate AND :endDate&quot;)&#10;    List&lt;Order&gt; findOrdersByDateRange(@Param(&quot;startDate&quot;) LocalDateTime startDate,&#10;                                     @Param(&quot;endDate&quot;) LocalDateTime endDate);&#10;&#10;    @Query(&quot;SELECT o FROM Order o WHERE o.user.id = :userId AND o.status = :status&quot;)&#10;    List&lt;Order&gt; findByUserIdAndStatus(@Param(&quot;userId&quot;) Long userId,&#10;                                     @Param(&quot;status&quot;) Order.OrderStatus status);&#10;&#10;    @Query(&quot;SELECT COUNT(o) FROM Order o WHERE o.user.id = :userId&quot;)&#10;    long countOrdersByUserId(@Param(&quot;userId&quot;) Long userId);&#10;&#10;    List&lt;Order&gt; findByUserId(Long userId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.Order;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface OrderRepository extends JpaRepository&lt;Order, Long&gt; {&#10;&#10;    List&lt;Order&gt; findByUserIdOrderByCreatedAtDesc(Long userId);&#10;&#10;    Page&lt;Order&gt; findByUserIdOrderByCreatedAtDesc(Long userId, Pageable pageable);&#10;&#10;    List&lt;Order&gt; findByStatus(Order.OrderStatus status);&#10;&#10;    List&lt;Order&gt; findByStatusOrderByCreatedAtDesc(Order.OrderStatus status);&#10;&#10;    @Query(&quot;SELECT o FROM Order o WHERE o.createdAt BETWEEN :startDate AND :endDate&quot;)&#10;    List&lt;Order&gt; findOrdersByDateRange(@Param(&quot;startDate&quot;) LocalDateTime startDate,&#10;                                     @Param(&quot;endDate&quot;) LocalDateTime endDate);&#10;&#10;    @Query(&quot;SELECT o FROM Order o WHERE o.user.id = :userId AND o.status = :status&quot;)&#10;    List&lt;Order&gt; findByUserIdAndStatus(@Param(&quot;userId&quot;) Long userId,&#10;                                     @Param(&quot;status&quot;) Order.OrderStatus status);&#10;&#10;    @Query(&quot;SELECT COUNT(o) FROM Order o WHERE o.user.id = :userId&quot;)&#10;    long countOrdersByUserId(@Param(&quot;userId&quot;) Long userId);&#10;&#10;    List&lt;Order&gt; findByUserId(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/repository/UserRepository.java" />
              <option name="originalContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;&#10;    boolean existsByEmail(String email);&#10;&#10;    @Query(&quot;SELECT u FROM User u WHERE u.email = :email AND u.isActive = true&quot;)&#10;    Optional&lt;User&gt; findActiveUserByEmail(@Param(&quot;email&quot;) String email);&#10;&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.role = 'ADMIN'&quot;)&#10;    long countAdminUsers();&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.repository;&#10;&#10;import com.ecommerce.api.entity.User;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;&#10;    Page&lt;User&gt; findByIsActiveTrue(Pageable pageable);&#10;&#10;    List&lt;User&gt; findByRoleAndIsActiveTrue(User.Role role);&#10;&#10;    List&lt;User&gt; findByIsActiveTrue();&#10;&#10;    boolean existsByEmail(String email);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/AuthService.java" />
              <option name="updatedContent" value="package com.ecommerce.api.service;&#10;&#10;import com.ecommerce.api.dto.LoginRequest;&#10;import com.ecommerce.api.dto.RegisterRequest;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class AuthService {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    public Optional&lt;Map&lt;String, Object&gt;&gt; login(LoginRequest request) {&#10;        Optional&lt;User&gt; userOptional = userRepository.findByEmail(request.getEmail());&#10;        &#10;        if (userOptional.isPresent()) {&#10;            User user = userOptional.get();&#10;            // In a real application, you would verify the password hash&#10;            if (user.getPassword().equals(request.getPassword()) &amp;&amp; user.getIsActive()) {&#10;                Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;                response.put(&quot;message&quot;, &quot;Login successful&quot;);&#10;                response.put(&quot;userId&quot;, user.getId());&#10;                response.put(&quot;email&quot;, user.getEmail());&#10;                response.put(&quot;firstName&quot;, user.getFirstName());&#10;                response.put(&quot;lastName&quot;, user.getLastName());&#10;                response.put(&quot;role&quot;, user.getRole().name());&#10;                &#10;                return Optional.of(response);&#10;            }&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    public Optional&lt;Map&lt;String, Object&gt;&gt; register(RegisterRequest request) {&#10;        // Check if email already exists&#10;        if (userRepository.findByEmail(request.getEmail()).isPresent()) {&#10;            return Optional.empty();&#10;        }&#10;        &#10;        User user = new User();&#10;        user.setFirstName(request.getFirstName());&#10;        user.setLastName(request.getLastName());&#10;        user.setEmail(request.getEmail());&#10;        user.setPassword(request.getPassword()); // In real app, encrypt this&#10;        user.setPhone(request.getPhone());&#10;        user.setRole(User.Role.USER);&#10;        user.setIsActive(true);&#10;        &#10;        User savedUser = userRepository.save(user);&#10;        &#10;        Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;        response.put(&quot;message&quot;, &quot;Registration successful&quot;);&#10;        response.put(&quot;userId&quot;, savedUser.getId());&#10;        response.put(&quot;email&quot;, savedUser.getEmail());&#10;        response.put(&quot;firstName&quot;, savedUser.getFirstName());&#10;        response.put(&quot;lastName&quot;, savedUser.getLastName());&#10;        &#10;        return Optional.of(response);&#10;    }&#10;&#10;    public boolean checkEmailExists(String email) {&#10;        return userRepository.findByEmail(email).isPresent();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/OrderService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/OrderService.java" />
              <option name="originalContent" value="package com.ecommerce.api.service;&#10;&#10;import com.ecommerce.api.dto.OrderItemResponse;&#10;import com.ecommerce.api.dto.OrderResponse;&#10;import com.ecommerce.api.dto.ProductResponse;&#10;import com.ecommerce.api.entity.Order;&#10;import com.ecommerce.api.entity.OrderItem;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.OrderRepository;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@Transactional&#10;public class OrderService {&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private ProductService productService;&#10;&#10;    public Page&lt;OrderResponse&gt; getAllOrders(Pageable pageable) {&#10;        Page&lt;Order&gt; orders = orderRepository.findAll(pageable);&#10;        return orders.map(this::convertToOrderResponse);&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; getOrderById(Long id) {&#10;        Optional&lt;Order&gt; order = orderRepository.findById(id);&#10;        return order.map(this::convertToOrderResponse);&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; createOrder(Map&lt;String, Object&gt; orderRequest) {&#10;        try {&#10;            Long userId = Long.valueOf(orderRequest.get(&quot;userId&quot;).toString());&#10;            String shippingAddress = (String) orderRequest.get(&quot;shippingAddress&quot;);&#10;            String billingAddress = (String) orderRequest.get(&quot;billingAddress&quot;);&#10;            String paymentMethod = (String) orderRequest.get(&quot;paymentMethod&quot;);&#10;            String notes = (String) orderRequest.get(&quot;notes&quot;);&#10;&#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Map&lt;String, Object&gt;&gt; items = (List&lt;Map&lt;String, Object&gt;&gt;) orderRequest.get(&quot;items&quot;);&#10;&#10;            User user = userRepository.findById(userId)&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;            Order order = new Order();&#10;            order.setUser(user);&#10;            order.setStatus(Order.OrderStatus.PENDING);&#10;            order.setShippingAddress(shippingAddress);&#10;            order.setBillingAddress(billingAddress);&#10;            order.setPaymentMethod(paymentMethod);&#10;            order.setNotes(notes);&#10;&#10;            BigDecimal totalAmount = BigDecimal.ZERO;&#10;&#10;            // Save order first to get ID&#10;            Order savedOrder = orderRepository.save(order);&#10;&#10;            // Add order items&#10;            for (Map&lt;String, Object&gt; itemData : items) {&#10;                String productId = itemData.get(&quot;productId&quot;).toString();&#10;                Integer quantity = Integer.valueOf(itemData.get(&quot;quantity&quot;).toString());&#10;&#10;                // Fetch product from MongoDB&#10;                Optional&lt;ProductResponse&gt; productOpt = productService.getProductById(productId);&#10;                if (productOpt.isPresent()) {&#10;                    ProductResponse product = productOpt.get();&#10;                    &#10;                    OrderItem orderItem = new OrderItem();&#10;                    orderItem.setOrder(savedOrder);&#10;                    orderItem.setProductId(productId);&#10;                    orderItem.setProductName(product.getName());&#10;                    orderItem.setProductImageUrl(product.getImageUrl());&#10;                    orderItem.setQuantity(quantity);&#10;                    orderItem.setUnitPrice(product.getPrice());&#10;&#10;                    BigDecimal subtotal = product.getPrice().multiply(BigDecimal.valueOf(quantity));&#10;                    orderItem.setSubtotal(subtotal);&#10;                    totalAmount = totalAmount.add(subtotal);&#10;&#10;                    savedOrder.getOrderItems().add(orderItem);&#10;                }&#10;            }&#10;&#10;            savedOrder.setTotalAmount(totalAmount);&#10;            Order finalOrder = orderRepository.save(savedOrder);&#10;&#10;            return Optional.of(convertToOrderResponse(finalOrder));&#10;        } catch (Exception e) {&#10;            return Optional.empty();&#10;        }&#10;    }&#10;&#10;    private OrderResponse convertToOrderResponse(Order order) {&#10;        OrderResponse response = new OrderResponse();&#10;        response.setId(order.getId());&#10;        response.setUserId(order.getUser().getId());&#10;        response.setStatus(order.getStatus());&#10;        response.setTotalAmount(order.getTotalAmount());&#10;        response.setShippingAddress(order.getShippingAddress());&#10;        response.setBillingAddress(order.getBillingAddress());&#10;        response.setPaymentMethod(order.getPaymentMethod());&#10;        response.setNotes(order.getNotes());&#10;        response.setCreatedAt(order.getCreatedAt());&#10;&#10;        List&lt;OrderItemResponse&gt; orderItemResponses = order.getOrderItems().stream()&#10;                .map(this::convertToOrderItemResponse)&#10;                .collect(Collectors.toList());&#10;        response.setOrderItems(orderItemResponses);&#10;&#10;        return response;&#10;    }&#10;&#10;    private OrderItemResponse convertToOrderItemResponse(OrderItem orderItem) {&#10;        OrderItemResponse response = new OrderItemResponse();&#10;        response.setId(orderItem.getId());&#10;        response.setProductId(orderItem.getProductId());&#10;        response.setProductName(orderItem.getProductName());&#10;        response.setProductImageUrl(orderItem.getProductImageUrl());&#10;        response.setQuantity(orderItem.getQuantity());&#10;        response.setUnitPrice(orderItem.getUnitPrice());&#10;        response.setSubtotal(orderItem.getSubtotal());&#10;        return response;&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; updateOrderStatus(Long id, String status) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            try {&#10;                Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;                order.setStatus(orderStatus);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return Optional.of(convertToOrderResponse(updatedOrder));&#10;            } catch (IllegalArgumentException e) {&#10;                return Optional.empty();&#10;            }&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public List&lt;OrderResponse&gt; getOrdersByUserId(Long userId) {&#10;        List&lt;Order&gt; orders = orderRepository.findByUserIdOrderByCreatedAtDesc(userId);&#10;        return orders.stream()&#10;                .map(this::convertToOrderResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public Optional&lt;List&lt;OrderResponse&gt;&gt; getOrdersByStatus(String status) {&#10;        try {&#10;            Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;            List&lt;Order&gt; orders = orderRepository.findByStatusOrderByCreatedAtDesc(orderStatus);&#10;            List&lt;OrderResponse&gt; orderResponses = orders.stream()&#10;                    .map(this::convertToOrderResponse)&#10;                    .collect(Collectors.toList());&#10;            return Optional.of(orderResponses);&#10;        } catch (IllegalArgumentException e) {&#10;            return Optional.empty();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; cancelOrder(Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            if (order.getStatus() == Order.OrderStatus.PENDING || order.getStatus() == Order.OrderStatus.CONFIRMED) {&#10;                order.setStatus(Order.OrderStatus.CANCELLED);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return Optional.of(convertToOrderResponse(updatedOrder));&#10;            }&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public boolean deleteOrder(Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            orderRepository.delete(optionalOrder.get());&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecommerce.api.service;&#10;&#10;import com.ecommerce.api.dto.OrderItemResponse;&#10;import com.ecommerce.api.dto.OrderResponse;&#10;import com.ecommerce.api.dto.ProductResponse;&#10;import com.ecommerce.api.entity.Order;&#10;import com.ecommerce.api.entity.OrderItem;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.OrderRepository;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@Transactional&#10;public class OrderService {&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private ProductService productService;&#10;&#10;    public Page&lt;OrderResponse&gt; getAllOrders(Pageable pageable) {&#10;        Page&lt;Order&gt; orders = orderRepository.findAll(pageable);&#10;        return orders.map(this::convertToOrderResponse);&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; getOrderById(Long id) {&#10;        Optional&lt;Order&gt; order = orderRepository.findById(id);&#10;        return order.map(this::convertToOrderResponse);&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; createOrder(Map&lt;String, Object&gt; orderRequest) {&#10;        try {&#10;            Long userId = Long.valueOf(orderRequest.get(&quot;userId&quot;).toString());&#10;            String shippingAddress = (String) orderRequest.get(&quot;shippingAddress&quot;);&#10;            String billingAddress = (String) orderRequest.get(&quot;billingAddress&quot;);&#10;            String paymentMethod = (String) orderRequest.get(&quot;paymentMethod&quot;);&#10;            String notes = (String) orderRequest.get(&quot;notes&quot;);&#10;&#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Map&lt;String, Object&gt;&gt; items = (List&lt;Map&lt;String, Object&gt;&gt;) orderRequest.get(&quot;items&quot;);&#10;&#10;            User user = userRepository.findById(userId)&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;            Order order = new Order();&#10;            order.setUser(user);&#10;            order.setStatus(Order.OrderStatus.PENDING);&#10;            order.setShippingAddress(shippingAddress);&#10;            order.setBillingAddress(billingAddress);&#10;            order.setPaymentMethod(paymentMethod);&#10;            order.setNotes(notes);&#10;&#10;            BigDecimal totalAmount = BigDecimal.ZERO;&#10;&#10;            // Save order first to get ID&#10;            Order savedOrder = orderRepository.save(order);&#10;&#10;            // Add order items&#10;            for (Map&lt;String, Object&gt; itemData : items) {&#10;                String productId = itemData.get(&quot;productId&quot;).toString();&#10;                Integer quantity = Integer.valueOf(itemData.get(&quot;quantity&quot;).toString());&#10;&#10;                // Fetch product from MongoDB&#10;                Optional&lt;ProductResponse&gt; productOpt = productService.getProductById(productId);&#10;                if (productOpt.isPresent()) {&#10;                    ProductResponse product = productOpt.get();&#10;                    &#10;                    OrderItem orderItem = new OrderItem();&#10;                    orderItem.setOrder(savedOrder);&#10;                    orderItem.setProductId(productId);&#10;                    orderItem.setProductName(product.getName());&#10;                    orderItem.setProductImageUrl(product.getMainImageUrl());&#10;                    orderItem.setQuantity(quantity);&#10;                    orderItem.setUnitPrice(product.getPrice());&#10;&#10;                    BigDecimal subtotal = product.getPrice().multiply(BigDecimal.valueOf(quantity));&#10;                    orderItem.setSubtotal(subtotal);&#10;                    totalAmount = totalAmount.add(subtotal);&#10;&#10;                    savedOrder.getOrderItems().add(orderItem);&#10;                }&#10;            }&#10;&#10;            savedOrder.setTotalAmount(totalAmount);&#10;            Order finalOrder = orderRepository.save(savedOrder);&#10;&#10;            return Optional.of(convertToOrderResponse(finalOrder));&#10;        } catch (Exception e) {&#10;            return Optional.empty();&#10;        }&#10;    }&#10;&#10;    private OrderResponse convertToOrderResponse(Order order) {&#10;        OrderResponse response = new OrderResponse();&#10;        response.setId(order.getId());&#10;        response.setUserId(order.getUser().getId());&#10;        response.setStatus(order.getStatus());&#10;        response.setTotalAmount(order.getTotalAmount());&#10;        response.setShippingAddress(order.getShippingAddress());&#10;        response.setBillingAddress(order.getBillingAddress());&#10;        response.setPaymentMethod(order.getPaymentMethod());&#10;        response.setNotes(order.getNotes());&#10;        response.setCreatedAt(order.getCreatedAt());&#10;&#10;        List&lt;OrderItemResponse&gt; orderItemResponses = order.getOrderItems().stream()&#10;                .map(this::convertToOrderItemResponse)&#10;                .collect(Collectors.toList());&#10;        response.setOrderItems(orderItemResponses);&#10;&#10;        return response;&#10;    }&#10;&#10;    private OrderItemResponse convertToOrderItemResponse(OrderItem orderItem) {&#10;        OrderItemResponse response = new OrderItemResponse();&#10;        response.setId(orderItem.getId());&#10;        response.setProductId(orderItem.getProductId());&#10;        response.setProductName(orderItem.getProductName());&#10;        response.setProductImageUrl(orderItem.getProductImageUrl());&#10;        response.setQuantity(orderItem.getQuantity());&#10;        response.setUnitPrice(orderItem.getUnitPrice());&#10;        response.setSubtotal(orderItem.getSubtotal());&#10;        return response;&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; updateOrderStatus(Long id, String status) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            try {&#10;                Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;                order.setStatus(orderStatus);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return Optional.of(convertToOrderResponse(updatedOrder));&#10;            } catch (IllegalArgumentException e) {&#10;                return Optional.empty();&#10;            }&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public List&lt;OrderResponse&gt; getOrdersByUserId(Long userId) {&#10;        List&lt;Order&gt; orders = orderRepository.findByUserIdOrderByCreatedAtDesc(userId);&#10;        return orders.stream()&#10;                .map(this::convertToOrderResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public Optional&lt;List&lt;OrderResponse&gt;&gt; getOrdersByStatus(String status) {&#10;        try {&#10;            Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status.toUpperCase());&#10;            List&lt;Order&gt; orders = orderRepository.findByStatusOrderByCreatedAtDesc(orderStatus);&#10;            List&lt;OrderResponse&gt; orderResponses = orders.stream()&#10;                    .map(this::convertToOrderResponse)&#10;                    .collect(Collectors.toList());&#10;            return Optional.of(orderResponses);&#10;        } catch (IllegalArgumentException e) {&#10;            return Optional.empty();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;OrderResponse&gt; cancelOrder(Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            Order order = optionalOrder.get();&#10;            if (order.getStatus() == Order.OrderStatus.PENDING || order.getStatus() == Order.OrderStatus.CONFIRMED) {&#10;                order.setStatus(Order.OrderStatus.CANCELLED);&#10;                Order updatedOrder = orderRepository.save(order);&#10;                return Optional.of(convertToOrderResponse(updatedOrder));&#10;            }&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public boolean deleteOrder(Long id) {&#10;        Optional&lt;Order&gt; optionalOrder = orderRepository.findById(id);&#10;        if (optionalOrder.isPresent()) {&#10;            orderRepository.delete(optionalOrder.get());&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/ecommerce/api/service/UserService.java" />
              <option name="updatedContent" value="package com.ecommerce.api.service;&#10;&#10;import com.ecommerce.api.dto.RegisterRequest;&#10;import com.ecommerce.api.dto.UserResponse;&#10;import com.ecommerce.api.entity.User;&#10;import com.ecommerce.api.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class UserService {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    public Page&lt;UserResponse&gt; getAllUsers(Pageable pageable) {&#10;        Page&lt;User&gt; users = userRepository.findByIsActiveTrue(pageable);&#10;        return users.map(this::convertToResponse);&#10;    }&#10;&#10;    public Optional&lt;UserResponse&gt; getUserById(Long id) {&#10;        Optional&lt;User&gt; user = userRepository.findById(id);&#10;        return user.filter(u -&gt; u.getIsActive()).map(this::convertToResponse);&#10;    }&#10;&#10;    public Optional&lt;UserResponse&gt; createUser(RegisterRequest request) {&#10;        // Check if email already exists&#10;        if (userRepository.findByEmail(request.getEmail()).isPresent()) {&#10;            return Optional.empty();&#10;        }&#10;        &#10;        User user = new User();&#10;        user.setFirstName(request.getFirstName());&#10;        user.setLastName(request.getLastName());&#10;        user.setEmail(request.getEmail());&#10;        user.setPassword(request.getPassword()); // In real app, encrypt this&#10;        user.setPhone(request.getPhone());&#10;        user.setRole(User.Role.USER);&#10;        user.setIsActive(true);&#10;        &#10;        User savedUser = userRepository.save(user);&#10;        return Optional.of(convertToResponse(savedUser));&#10;    }&#10;&#10;    public Optional&lt;UserResponse&gt; updateUser(Long id, RegisterRequest request) {&#10;        Optional&lt;User&gt; optionalUser = userRepository.findById(id);&#10;        if (optionalUser.isPresent()) {&#10;            User user = optionalUser.get();&#10;            user.setFirstName(request.getFirstName());&#10;            user.setLastName(request.getLastName());&#10;            user.setPhone(request.getPhone());&#10;            &#10;            User updatedUser = userRepository.save(user);&#10;            return Optional.of(convertToResponse(updatedUser));&#10;        }&#10;        return Optional.empty();&#10;    }&#10;&#10;    public boolean deleteUser(Long id) {&#10;        Optional&lt;User&gt; optionalUser = userRepository.findById(id);&#10;        if (optionalUser.isPresent()) {&#10;            User user = optionalUser.get();&#10;            user.setIsActive(false);&#10;            userRepository.save(user);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public Optional&lt;UserResponse&gt; getUserByEmail(String email) {&#10;        Optional&lt;User&gt; user = userRepository.findByEmail(email);&#10;        return user.filter(u -&gt; u.getIsActive()).map(this::convertToResponse);&#10;    }&#10;&#10;    public List&lt;UserResponse&gt; getUsersByRole(User.Role role) {&#10;        List&lt;User&gt; users = userRepository.findByRoleAndIsActiveTrue(role);&#10;        return users.stream()&#10;                .map(this::convertToResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public boolean emailExists(String email) {&#10;        return userRepository.findByEmail(email).isPresent();&#10;    }&#10;&#10;    private UserResponse convertToResponse(User user) {&#10;        UserResponse response = new UserResponse();&#10;        response.setId(user.getId());&#10;        response.setFirstName(user.getFirstName());&#10;        response.setLastName(user.getLastName());&#10;        response.setEmail(user.getEmail());&#10;        response.setPhone(user.getPhone());&#10;        response.setRole(user.getRole().name());&#10;        response.setIsActive(user.getIsActive());&#10;        response.setCreatedAt(user.getCreatedAt());&#10;        response.setUpdatedAt(user.getUpdatedAt());&#10;        return response;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="# Server Configuration&#10;server.port=9090&#10;server.servlet.context-path=/api&#10;&#10;# Database Configuration (H2 for development)&#10;spring.datasource.url=jdbc:h2:mem:ecommerce&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;&#10;# H2 Console (for development)&#10;spring.h2.console.enabled=true&#10;spring.h2.console.path=/h2-console&#10;&#10;# JPA Configuration&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.jpa.hibernate.ddl-auto=create-drop&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.format_sql=true&#10;&#10;# Logging&#10;logging.level.com.ecommerce.api=DEBUG&#10;logging.level.org.springframework.security=DEBUG&#10;&#10;# JWT Configuration&#10;app.jwt.secret=mySecretKey&#10;app.jwt.expiration=86400000&#10;&#10;# CORS Configuration&#10;app.cors.allowed-origins=http://localhost:3000,http://localhost:3001&#10;&#10;# File Upload&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=10MB&#10;&#10;# Application Info&#10;management.endpoints.web.exposure.include=health,info&#10;management.endpoint.health.show-details=always&#10;&#10;spring.security.user.name=admin&#10;spring.security.user.password=secret123" />
              <option name="updatedContent" value="# Server Configuration&#10;server.port=8090&#10;server.servlet.context-path=/api&#10;&#10;# Database Configuration (H2 for development)&#10;spring.datasource.url=jdbc:h2:mem:ecommerce&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;&#10;# H2 Console (for development)&#10;spring.h2.console.enabled=true&#10;spring.h2.console.path=/h2-console&#10;&#10;# JPA Configuration&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.jpa.hibernate.ddl-auto=create-drop&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.format_sql=true&#10;&#10;# Logging&#10;logging.level.com.ecommerce.api=DEBUG&#10;logging.level.org.springframework.security=DEBUG&#10;&#10;# JWT Configuration&#10;app.jwt.secret=mySecretKey&#10;app.jwt.expiration=86400000&#10;&#10;# CORS Configuration&#10;app.cors.allowed-origins=http://localhost:3000,http://localhost:3001&#10;&#10;# File Upload&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=10MB&#10;&#10;# Application Info&#10;management.endpoints.web.exposure.include=health,info&#10;management.endpoint.health.show-details=always&#10;&#10;spring.security.user.name=admin&#10;spring.security.user.password=secret123" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>