openapi: 3.0.3
info:
  title: E-commerce API
  description: |
    Comprehensive E-commerce REST API providing authentication, product management, shopping cart, and order processing capabilities.
    
    ## Authentication
    This API uses JWT tokens for authentication. Include the JWT token in the Authorization header as `Bearer <token>`.
    
    ## Base URL
    - Development: `http://localhost:8080`
    - Frontend Origins: `http://localhost:3000`, `http://localhost:3001`
    
    ## Features
    - User authentication and registration
    - Product catalog management with search and filtering
    - Shopping cart operations
    - Order management and tracking
    - User profile management
    - Admin functions for user and product management
  version: 1.0.0
  contact:
    name: E-commerce API Support
    email: support@ecommerce-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Products
    description: Product catalog and management operations
  - name: Cart
    description: Shopping cart management
  - name: Orders
    description: Order processing and management
  - name: Users
    description: User profile and management
  - name: System
    description: System health and testing endpoints

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password to receive JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              user_login:
                summary: Standard user login
                value:
                  email: "user@example.com"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  message:
                    type: string
                    example: "Login successful"
              examples:
                login_success:
                  summary: Successful login
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    user:
                      id: 1
                      firstName: "John"
                      lastName: "Doe"
                      email: "user@example.com"
                      role: "USER"
                    message: "Login successful"
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
              examples:
                validation_error:
                  summary: Validation errors
                  value:
                    errors:
                      email: "Invalid email format"
                      password: "Password must be at least 6 characters"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              new_user:
                summary: New user registration
                value:
                  firstName: "Jane"
                  lastName: "Smith"
                  email: "jane@example.com"
                  password: "securepassword"
                  phone: "1234567890"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  message:
                    type: string
        '400':
          description: Email already exists or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"

  /auth/check-email/{email}:
    get:
      tags:
        - Authentication
      summary: Check email availability
      description: Check if an email address is already registered
      operationId: checkEmailExists
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: Email check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: True if email exists, false otherwise
              examples:
                email_exists:
                  summary: Email already exists
                  value:
                    exists: true
                email_available:
                  summary: Email available
                  value:
                    exists: false

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user (placeholder endpoint)
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  # Product Endpoints
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve all products with pagination, sorting, and filtering
      operationId: getAllProducts
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: "name"
            enum: ["name", "price", "category", "brand", "averageRating", "createdAt"]
        - name: sortDir
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            default: "asc"
            enum: ["asc", "desc"]
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
        - name: subCategory
          in: query
          description: Filter by subcategory
          required: false
          schema:
            type: string
        - name: brand
          in: query
          description: Filter by brand
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            format: decimal
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            format: decimal
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  pageable:
                    type: object
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer

    post:
      tags:
        - Products
      summary: Create new product
      description: Create a new product (Admin only)
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            examples:
              new_product:
                summary: New product creation
                value:
                  sku: "PROD-ABC-123"
                  name: "Premium Wireless Headphones"
                  description: "Immersive sound, comfortable design, and long-lasting battery life"
                  category: "Electronics"
                  subCategory: "Headphones"
                  brand: "AudioTech"
                  price: 199.99
                  currency: "USD"
                  stockQuantity: 50
                  images: 
                    - "https://example.com/images/headphones_main.jpg"
                    - "https://example.com/images/headphones_side.jpg"
                  specifications:
                    connectivity: "Bluetooth 5.0"
                    batteryLifeHours: 20
                    noiseCancellation: true
                    colorOptions: ["Black", "Silver", "Blue"]
                  variations:
                    - sku: "PROD-ABC-123-BLK"
                      color: "Black"
                      price: 199.99
                      stockQuantity: 25
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found

    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product (Admin only)
      operationId: updateProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Products
      summary: Delete product
      description: Soft delete a product (Admin only)
      operationId: deleteProduct
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '401':
          description: Unauthorized

  /products/sku/{sku}:
    get:
      tags:
        - Products
      summary: Get product by SKU
      description: Retrieve a specific product by its SKU
      operationId: getProductBySku
      parameters:
        - name: sku
          in: path
          required: true
          schema:
            type: string
          example: "PROD-ABC-123"
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found

  /products/category/{category}:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Retrieve all products in a specific category
      operationId: getProductsByCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
          example: "Electronics"
      responses:
        '200':
          description: Products in category retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/category/{category}/subcategory/{subCategory}:
    get:
      tags:
        - Products
      summary: Get products by subcategory
      description: Retrieve all products in a specific category and subcategory
      operationId: getProductsBySubCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
          example: "Electronics"
        - name: subCategory
          in: path
          required: true
          schema:
            type: string
          example: "Headphones"
      responses:
        '200':
          description: Products in subcategory retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/brand/{brand}:
    get:
      tags:
        - Products
      summary: Get products by brand
      description: Retrieve all products from a specific brand
      operationId: getProductsByBrand
      parameters:
        - name: brand
          in: path
          required: true
          schema:
            type: string
          example: "AudioTech"
      responses:
        '200':
          description: Products from brand retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/search:
    get:
      tags:
        - Products
      summary: Search products
      description: Search products by name, description, brand, or category
      operationId: searchProducts
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          example: "wireless headphones"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: "name"
        - name: sortDir
          in: query
          required: false
          schema:
            type: string
            default: "asc"
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer

  /products/price-range:
    get:
      tags:
        - Products
      summary: Get products by price range
      description: Retrieve products within a specific price range
      operationId: getProductsByPriceRange
      parameters:
        - name: minPrice
          in: query
          required: true
          schema:
            type: number
            format: decimal
          example: 50.00
        - name: maxPrice
          in: query
          required: true
          schema:
            type: number
            format: decimal
          example: 500.00
      responses:
        '200':
          description: Products in price range retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/categories:
    get:
      tags:
        - Products
      summary: Get all categories
      description: Retrieve all distinct product categories
      operationId: getAllCategories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["Electronics", "Clothing", "Books", "Home & Garden"]

  /products/categories/{category}/subcategories:
    get:
      tags:
        - Products
      summary: Get subcategories by category
      description: Retrieve all subcategories for a specific category
      operationId: getSubCategoriesByCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
          example: "Electronics"
      responses:
        '200':
          description: Subcategories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["Headphones", "Smartphones", "Laptops", "Speakers"]

  /products/brands:
    get:
      tags:
        - Products
      summary: Get all brands
      description: Retrieve all distinct product brands
      operationId: getAllBrands
      responses:
        '200':
          description: Brands retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["AudioTech", "Apple", "Samsung", "Sony", "TechFlow"]

  /products/{id}/reviews:
    get:
      tags:
        - Products
      summary: Get product reviews
      description: Retrieve all reviews for a specific product
      operationId: getProductReviews
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: "date"
        - name: sortDir
          in: query
          required: false
          schema:
            type: string
            default: "desc"
      responses:
        '200':
          description: Product reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductReviewResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer

    post:
      tags:
        - Products
      summary: Add product review
      description: Add a review for a specific product
      operationId: addProductReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReviewRequest'
            examples:
              new_review:
                summary: New product review
                value:
                  productId: "654321abcdef01234567890"
                  userId: "987654fedcba01234567890"
                  rating: 5
                  comment: "Amazing sound quality!"
                  isVerifiedPurchase: true
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /products/{id}/rating-summary:
    get:
      tags:
        - Products
      summary: Get product rating summary
      description: Get rating statistics for a specific product
      operationId: getProductRatingSummary
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      responses:
        '200':
          description: Rating summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  averageRating:
                    type: number
                    format: double
                    example: 4.5
                  totalReviews:
                    type: integer
                    example: 25
                  ratingDistribution:
                    type: object
                    properties:
                      "1":
                        type: integer
                        example: 1
                      "2":
                        type: integer
                        example: 2
                      "3":
                        type: integer
                        example: 3
                      "4":
                        type: integer
                        example: 7
                      "5":
                        type: integer
                        example: 12

  /products/{id}/stock:
    put:
      tags:
        - Products
      summary: Update product stock
      description: Update the stock quantity for a product (Admin only)
      operationId: updateProductStock
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stockQuantity
              properties:
                stockQuantity:
                  type: integer
                  minimum: 0
            example:
              stockQuantity: 75
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
        '401':
          description: Unauthorized

  /products/{id}/variations/{variationSku}/stock:
    put:
      tags:
        - Products
      summary: Update variation stock
      description: Update the stock quantity for a product variation (Admin only)
      operationId: updateVariationStock
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "654321abcdef01234567890"
        - name: variationSku
          in: path
          required: true
          schema:
            type: string
          example: "PROD-ABC-123-BLK"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stockQuantity
              properties:
                stockQuantity:
                  type: integer
                  minimum: 0
            example:
              stockQuantity: 30
      responses:
        '200':
          description: Variation stock updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product or variation not found
        '401':
          description: Unauthorized

  /products/featured:
    get:
      tags:
        - Products
      summary: Get featured products
      description: Retrieve featured products (high-rated and popular items)
      operationId: getFeaturedProducts
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Featured products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/low-stock:
    get:
      tags:
        - Products
      summary: Get low stock products
      description: Retrieve products with low stock quantities (Admin only)
      operationId: getLowStockProducts
      security:
        - bearerAuth: []
      parameters:
        - name: threshold
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: Low stock products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Unauthorized

  /products/top-rated:
    get:
      tags:
        - Products
      summary: Get top-rated products
      description: Retrieve products with highest ratings
      operationId: getTopRatedProducts
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: minRating
          in: query
          required: false
          schema:
            type: number
            format: double
            default: 4.0
            minimum: 1.0
            maximum: 5.0
      responses:
        '200':
          description: Top-rated products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  # Cart Endpoints
  /cart/user/{userId}:
    get:
      tags:
        - Cart
      summary: Get user's cart
      description: Retrieve all items in a user's shopping cart
      operationId: getCartItems
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cart items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized

  /cart/add:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product to the user's shopping cart
      operationId: addToCart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - productId
                - quantity
              properties:
                userId:
                  type: integer
                  format: int64
                productId:
                  type: string
                quantity:
                  type: integer
                  minimum: 1
            examples:
              add_to_cart:
                summary: Add product to cart
                value:
                  userId: 1
                  productId: "prod_123"
                  quantity: 2
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /cart/{id}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of an item in the cart
      operationId: updateCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - quantity
              properties:
                userId:
                  type: integer
                  format: int64
                quantity:
                  type: integer
                  minimum: 1
            examples:
              update_quantity:
                summary: Update item quantity
                value:
                  userId: 1
                  quantity: 3
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove an item from the user's shopping cart
      operationId: removeFromCart
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: integer
                  format: int64
            examples:
              remove_item:
                summary: Remove cart item
                value:
                  userId: 1
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /cart/user/{userId}/clear:
    delete:
      tags:
        - Cart
      summary: Clear user's cart
      description: Remove all items from the user's shopping cart
      operationId: clearCart
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cart cleared successfully
        '401':
          description: Unauthorized

  /cart/user/{userId}/count:
    get:
      tags:
        - Cart
      summary: Get cart item count
      description: Get the total number of items in the user's cart
      operationId: getCartItemCount
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cart item count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5
        '401':
          description: Unauthorized

  /cart/user/{userId}/total:
    get:
      tags:
        - Cart
      summary: Get cart total
      description: Get the total price of all items in the user's cart
      operationId: getCartTotal
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cart total retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    format: decimal
                    example: 299.99
                  itemCount:
                    type: integer
                    example: 3
        '401':
          description: Unauthorized

  # Order Endpoints
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve all orders with pagination (Admin only)
      operationId: getAllOrders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: "createdAt"
        - name: sortDir
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            default: "desc"
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order from the user's cart
      operationId: createOrder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: integer
                  format: int64
                shippingAddress:
                  type: string
                paymentMethod:
                  type: string
                notes:
                  type: string
            examples:
              new_order:
                summary: Create order from cart
                value:
                  userId: 1
                  shippingAddress: "123 Main St, City, State 12345"
                  paymentMethod: "credit_card"
                  notes: "Please handle with care"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request or empty cart
        '401':
          description: Unauthorized

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      operationId: getOrderById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Orders
      summary: Delete order
      description: Delete an order (Admin only)
      operationId: deleteOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found
        '401':
          description: Unauthorized

  /orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of an order (Admin only)
      operationId: updateOrderStatus
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: ["PENDING", "CONFIRMED", "SHIPPED", "DELIVERED", "CANCELLED"]
            examples:
              update_status:
                summary: Update order to shipped
                value:
                  status: "SHIPPED"
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid status
        '404':
          description: Order not found
        '401':
          description: Unauthorized

  /orders/user/{userId}:
    get:
      tags:
        - Orders
      summary: Get orders by user
      description: Retrieve all orders for a specific user
      operationId: getOrdersByUserId
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: User orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized

  /orders/status/{status}:
    get:
      tags:
        - Orders
      summary: Get orders by status
      description: Retrieve all orders with a specific status (Admin only)
      operationId: getOrdersByStatus
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: ["PENDING", "CONFIRMED", "SHIPPED", "DELIVERED", "CANCELLED"]
          example: "PENDING"
      responses:
        '200':
          description: Orders with status retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid status
        '401':
          description: Unauthorized

  /orders/{id}/cancel:
    put:
      tags:
        - Orders
      summary: Cancel order
      description: Cancel an order (User can cancel their own orders, Admin can cancel any)
      operationId: cancelOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
        '400':
          description: Order cannot be cancelled
        '401':
          description: Unauthorized

  # User Endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users with pagination (Admin only)
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: "id"
        - name: sortDir
          in: query
          required: false
          schema:
            type: string
            default: "asc"
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account (Admin only)
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Email already exists or validation error
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Users
      summary: Delete user
      description: Soft delete a user (Admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /users/email/{email}:
    get:
      tags:
        - Users
      summary: Get user by email
      description: Retrieve a user by email address
      operationId: getUserByEmail
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /users/role/{role}:
    get:
      tags:
        - Users
      summary: Get users by role
      description: Retrieve all users with a specific role (Admin only)
      operationId: getUsersByRole
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: path
          required: true
          schema:
            type: string
            enum: ["USER", "ADMIN"]
          example: "USER"
      responses:
        '200':
          description: Users with role retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

  # System Endpoints
  /test:
    get:
      tags:
        - System
      summary: API health check
      description: Test endpoint to verify API is running
      operationId: test
      responses:
        '200':
          description: API is running successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ecommerce API is running successfully!"
                  timestamp:
                    type: string
                    format: date-time
                  status:
                    type: string
                    example: "OK"
                  version:
                    type: string
                    example: "1.0.0"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include as 'Bearer <token>'

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: User's password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          maxLength: 50
          description: User's first name
          example: "John"
        lastName:
          type: string
          maxLength: 50
          description: User's last name
          example: "Doe"
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: User's password
          example: "securepassword"
        phone:
          type: string
          maxLength: 15
          description: User's phone number
          example: "1234567890"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User's unique identifier
          example: 1
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        phone:
          type: string
          description: User's phone number
          example: "1234567890"
        role:
          type: string
          enum: ["USER", "ADMIN"]
          description: User's role
          example: "USER"
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ProductRequest:
      type: object
      required:
        - sku
        - name
        - price
        - stockQuantity
      properties:
        sku:
          type: string
          maxLength: 50
          description: Product SKU (Stock Keeping Unit)
          example: "PROD-ABC-123"
        name:
          type: string
          maxLength: 100
          description: Product name
          example: "Premium Wireless Headphones"
        description:
          type: string
          maxLength: 1000
          description: Product description
          example: "Immersive sound, comfortable design, and long-lasting battery life"
        category:
          type: string
          maxLength: 50
          description: Product category
          example: "Electronics"
        subCategory:
          type: string
          maxLength: 50
          description: Product subcategory
          example: "Headphones"
        brand:
          type: string
          maxLength: 50
          description: Product brand
          example: "AudioTech"
        price:
          type: number
          format: decimal
          minimum: 0.01
          description: Product price
          example: 199.99
        currency:
          type: string
          maxLength: 3
          description: Currency code
          example: "USD"
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
          example: 50
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
          example: 
            - "https://example.com/images/headphones_main.jpg"
            - "https://example.com/images/headphones_side.jpg"
        specifications:
          $ref: '#/components/schemas/ProductSpecifications'
        variations:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
        isActive:
          type: boolean
          description: Whether the product is active
          example: true

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          description: Product unique identifier
          example: "654321abcdef01234567890"
        sku:
          type: string
          description: Product SKU
          example: "PROD-ABC-123"
        name:
          type: string
          description: Product name
          example: "Premium Wireless Headphones"
        description:
          type: string
          description: Product description
          example: "Immersive sound, comfortable design, and long-lasting battery life"
        category:
          type: string
          description: Product category
          example: "Electronics"
        subCategory:
          type: string
          description: Product subcategory
          example: "Headphones"
        brand:
          type: string
          description: Product brand
          example: "AudioTech"
        price:
          type: number
          format: decimal
          description: Product price
          example: 199.99
        currency:
          type: string
          description: Currency code
          example: "USD"
        stockQuantity:
          type: integer
          description: Available stock quantity
          example: 50
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
          example: 
            - "https://example.com/images/headphones_main.jpg"
            - "https://example.com/images/headphones_side.jpg"
        specifications:
          $ref: '#/components/schemas/ProductSpecifications'
        variations:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ProductReviewResponse'
        isActive:
          type: boolean
          description: Whether the product is active
          example: true
        averageRating:
          type: number
          format: double
          description: Average customer rating
          example: 4.5
        totalReviews:
          type: integer
          description: Total number of reviews
          example: 25
        totalStock:
          type: integer
          description: Total stock including variations
          example: 100
        mainImageUrl:
          type: string
          format: uri
          description: Main product image URL
          example: "https://example.com/images/headphones_main.jpg"
        createdAt:
          type: string
          format: date-time
          description: Product creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ProductSpecifications:
      type: object
      properties:
        connectivity:
          type: string
          description: Connectivity type
          example: "Bluetooth 5.0"
        batteryLifeHours:
          type: integer
          description: Battery life in hours
          example: 20
        noiseCancellation:
          type: boolean
          description: Has noise cancellation
          example: true
        colorOptions:
          type: array
          items:
            type: string
          description: Available color options
          example: ["Black", "Silver", "Blue"]
        weight:
          type: string
          description: Product weight
          example: "250g"
        dimensions:
          type: string
          description: Product dimensions
          example: "180 x 150 x 70 mm"
        warranty:
          type: string
          description: Warranty information
          example: "2 years"
        material:
          type: string
          description: Material composition
          example: "Premium plastic and metal"
        additionalSpecs:
          type: object
          additionalProperties: true
          description: Additional specifications as key-value pairs

    ProductVariation:
      type: object
      required:
        - sku
        - price
        - stockQuantity
      properties:
        sku:
          type: string
          maxLength: 50
          description: Variation SKU
          example: "PROD-ABC-123-BLK"
        color:
          type: string
          maxLength: 30
          description: Color variant
          example: "Black"
        size:
          type: string
          maxLength: 30
          description: Size variant
          example: "Large"
        price:
          type: number
          format: decimal
          minimum: 0.01
          description: Variation price
          example: 199.99
        stockQuantity:
          type: integer
          minimum: 0
          description: Variation stock quantity
          example: 25
        imageUrl:
          type: string
          format: uri
          description: Variation-specific image URL
          example: "https://example.com/images/headphones_black.jpg"
        isActive:
          type: boolean
          description: Whether the variation is active
          example: true

    ProductReviewRequest:
      type: object
      required:
        - productId
        - userId
        - rating
      properties:
        productId:
          type: string
          description: Product ID to review
          example: "654321abcdef01234567890"
        userId:
          type: string
          description: User ID leaving the review
          example: "987654fedcba01234567890"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
          example: 5
        comment:
          type: string
          maxLength: 1000
          description: Review comment
          example: "Amazing sound quality!"
        isVerifiedPurchase:
          type: boolean
          description: Whether this is from a verified purchase
          example: true

    ProductReviewResponse:
      type: object
      properties:
        userId:
          type: string
          description: User ID who left the review
          example: "987654fedcba01234567890"
        userName:
          type: string
          description: User name (populated from User service)
          example: "John Doe"
        rating:
          type: integer
          description: Rating from 1 to 5 stars
          example: 5
        comment:
          type: string
          description: Review comment
          example: "Amazing sound quality!"
        date:
          type: string
          format: date-time
          description: Review date
        isVerifiedPurchase:
          type: boolean
          description: Whether this is from a verified purchase
          example: true
        isApproved:
          type: boolean
          description: Whether the review is approved
          example: true

    CartItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Cart item unique identifier
          example: 1
        productId:
          type: string
          description: Product identifier
          example: "prod_123"
        productName:
          type: string
          description: Product name
          example: "Wireless Headphones"
        productPrice:
          type: number
          format: decimal
          description: Product price
          example: 199.99
        quantity:
          type: integer
          description: Quantity in cart
          example: 2
        subtotal:
          type: number
          format: decimal
          description: Subtotal for this item
          example: 399.98
        imageUrl:
          type: string
          format: uri
          description: Product image URL
          example: "https://example.com/images/headphones.jpg"

    CartResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          description: User identifier
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponse'
        totalItems:
          type: integer
          description: Total number of items in cart
          example: 3
        totalAmount:
          type: number
          format: decimal
          description: Total cart amount
          example: 599.97

    OrderItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Order item unique identifier
          example: 1
        productId:
          type: string
          description: Product identifier
          example: "prod_123"
        productName:
          type: string
          description: Product name
          example: "Wireless Headphones"
        price:
          type: number
          format: decimal
          description: Product price at time of order
          example: 199.99
        quantity:
          type: integer
          description: Quantity ordered
          example: 2
        subtotal:
          type: number
          format: decimal
          description: Subtotal for this item
          example: 399.98

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Order unique identifier
          example: 1
        userId:
          type: integer
          format: int64
          description: User identifier
          example: 1
        orderNumber:
          type: string
          description: Human-readable order number
          example: "ORD-2023-001"
        status:
          type: string
          enum: ["PENDING", "CONFIRMED", "SHIPPED", "DELIVERED", "CANCELLED"]
          description: Order status
          example: "PENDING"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
        totalAmount:
          type: number
          format: decimal
          description: Total order amount
          example: 599.97
        shippingAddress:
          type: string
          description: Shipping address
          example: "123 Main St, City, State 12345"
        paymentMethod:
          type: string
          description: Payment method used
          example: "credit_card"
        notes:
          type: string
          description: Order notes
          example: "Please handle with care"
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

  examples:
    ProductExample:
      summary: Sample product
      value:
        id: "prod_123"
        name: "Wireless Headphones"
        description: "High-quality wireless headphones with noise cancellation"
        price: 199.99
        stockQuantity: 50
        category: "Electronics"
        imageUrl: "https://example.com/images/headphones.jpg"
        isActive: true
        createdAt: "2023-01-01T00:00:00Z"
        updatedAt: "2023-01-01T00:00:00Z"

    UserExample:
      summary: Sample user
      value:
        id: 1
        firstName: "John"
        lastName: "Doe"
        email: "john.doe@example.com"
        phone: "1234567890"
        role: "USER"
        isActive: true
        createdAt: "2023-01-01T00:00:00Z"
        updatedAt: "2023-01-01T00:00:00Z"

    OrderExample:
      summary: Sample order
      value:
        id: 1
        userId: 1
        orderNumber: "ORD-2023-001"
        status: "PENDING"
        items:
          - id: 1
            productId: "prod_123"
            productName: "Wireless Headphones"
            price: 199.99
            quantity: 2
            subtotal: 399.98
        totalAmount: 399.98
        shippingAddress: "123 Main St, City, State 12345"
        paymentMethod: "credit_card"
        notes: "Please handle with care"
        createdAt: "2023-01-01T00:00:00Z"
        updatedAt: "2023-01-01T00:00:00Z"

# Error Responses
  responses:
    BadRequest:
      description: Bad request - validation errors or malformed request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation failed"
              errors:
                type: object
                additionalProperties:
                  type: string
                example:
                  email: "Invalid email format"
                  password: "Password must be at least 6 characters"

    Unauthorized:
      description: Unauthorized - missing or invalid authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized access"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
              timestamp:
                type: string
                format: date-time
